<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>TO-DO 리스트</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/index.css" rel="stylesheet">
  </head>
  <body class="d-flex h-100 text-center text-bg-dark">
    <div class="cover-container d-flex w-100 h-100 mx-auto flex-column">
      <header class="mb-auto">
        <%- include('header.ejs') %>
      </header>

      <!-- TO-DO List Section -->
      <main class="px-3 py-5">
        <h1>나의 TO-DO 리스트</h1>
        <div class="mb-3">
          <input type="text" id="todoInput" class="form-control" placeholder="할 일을 입력하세요">
        </div>
        <button class="btn btn-primary" id="addTodoBtn">추가</button>

        <ul id="todoList" class="list-group mt-4">
          <!-- 할 일 항목이 여기에 추가됩니다 -->
        </ul>
      </main>

      <footer class="mt-auto text-white-50 py-4">
        <%- include('footer.ejs') %>
      </footer>

    </div>

    <script>
      // 할 일 목록을 관리하는 배열
      let todos = [];

      // 할 일 항목 추가 함수
      function addTodo() {
        const todoInput = document.getElementById("todoInput");
        const todoText = todoInput.value.trim();

        if (todoText !== "") {
          todos.push(todoText);
          todoInput.value = ""; // 입력 필드 초기화
          renderTodos(); // 할 일 목록을 다시 렌더링
        }
      }

      // 할 일 목록을 화면에 렌더링하는 함수
      function renderTodos() {
        const todoList = document.getElementById("todoList");
        todoList.innerHTML = ""; // 기존 목록 초기화

        // 할 일 목록을 렌더링
        todos.forEach((todo, index) => {
          const todoItem = document.createElement("li");
          todoItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
          todoItem.innerHTML = `
            ${todo}
            <button class="btn btn-danger btn-sm" onclick="removeTodo(${index})">삭제</button>
          `;
          todoList.appendChild(todoItem);
        });
      }

      // 할 일 항목 삭제 함수
      function removeTodo(index) {
        todos.splice(index, 1); // 해당 인덱스의 항목 삭제
        renderTodos(); // 목록 업데이트
      }

      // 추가 버튼 클릭 시 할 일 추가
      document.getElementById("addTodoBtn").addEventListener("click", addTodo);

      // 엔터 키로도 추가 가능하게 설정
      document.getElementById("todoInput").addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          addTodo();
        }
      });
    </script>
  </body>
</html>
